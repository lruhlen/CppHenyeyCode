#ifndef LUDCMP_H
#define LUDCMP_H
#include <vector>
#include "global.h"
#include <math.h>

using namespace std;
//-------------------------------------------------------
// Note: all of the following is shamelessly swiped from
// Numerical Recipes, with a few adjustments to deal with
// the homegrown vec2d variable type.
//-------------------------------------------------------

struct LUdcmp
{
  int n;
  vector<vector<double> > lu;
  vector<int> indx;
  double d;
  LUdcmp(vector<vector<double> > &a);
  void solve(vector<double> &b, vector<double> &x);
  void solve(vector<vector<double> > &b, vector<vector<double> > &x);
  //  void inverse(vector<vector<double> > &ainv);
  vector<vector<double> > inverse();

  double det();
  // void mprove(vector<double> &b, vector<double> &x);
  //  vec2d &aref;
  
};


// The constructor.
//LUdcmp::LUdcmp(struct vec2d &a) : n(a[0].size(), lu(a), aref(a), indx(n))
LUdcmp::LUdcmp(vector<vector<double> > &a) : n(a[0].size()), lu(a), indx(n)
{
  const double TINY = 1.0e-40;
  int i, imax, j, k;
  double big, temp;
  vector<double> vv(n);
  d=1.0;
  
  for (i=0; i<n; i++)
    {
      big = 0.0;
      for (j=0; j<n; j++)
	{
	  if ((temp = fabs(lu[i][j])) > big) 
	    {
	      big = temp;
	    }
	}
      if (big == 0.0) cout<<"ERROR: Singular matrix in LUdcmp"<<endl;
      
      vv[i] = 1.0/big;

    }
  
  for (k=0; k<n; k++)
    {
      big = 0.0;
      imax = k;
      for (i=k; i<n; i++)
	{
	  temp = vv[i]* fabs(lu[i][k]);
	  if (temp > big)
	    {
	      big = temp;
	      imax = i;
	    }
	}
      
      if (k != imax)
	{
	  for (j=0; j<n; j++)
	    {
	      temp = lu[imax][j];
	      lu[imax][j] = lu[k][j];
	      lu[k][j] = temp;
	    }
	  d = -1.0 *d;
	  vv[imax] = vv[k];
	}

      indx[k] = imax;
      if (lu[k][k] == 0.0)
	{
	  lu[k][k] = TINY;
	}

      for (i=k+1; i<n; i++)
	{
	  temp = lu[i][k] /= lu[k][k];
	  for (j=k+1; j<n; j++)
	    {
	      lu[i][j] -= temp*lu[k][j];	    
	    }
	}
    }
} 


// The 1D vector solve method
void LUdcmp::solve(vector<double> &b, vector<double> &x)
{

  int i, ii=0,ip,j;
  double sum;
  if ( (b.size() != n) || (x.size() != n) )
    {
      cout<<"ERROR: LUdcmp::solve bad sizes"<<endl;
    }


  for (i=0; i<n; i++)
    {
      x[i] = b[i];
    }
  
  for (i=0; i<n; i++)
    {
      ip = indx[i]; 
      sum = x[ip]; 
      x[ip] = x[i];
      if (ii != 0)
	{
	  for (j=ii-1; j<i; j++)
	    {
	      sum -= lu[i][j] * x[j]; 
	    }
	}
      else if (sum != 0)
	{
	  ii = i+1;	 
	}
      x[i] = sum;
    }


  for (i=n-1;i>=0; i--)
    {
      sum = x[i]; 
      for (j=i+1; j<n; j++)
	{
	  sum = sum - (lu[i][j]*x[j]); 
	}
      x[i] = sum / lu[i][i];  // Error was here, once: had l[i][j] instead of l[i][i]


    }

}//end of the method


// The 2D vector solve method
void LUdcmp::solve(vector<vector<double> > &b, vector<vector<double> > &x)
{
  int i,j,m=b[0].size();

  if ((b.size() != n) || (x.size() != n) || (b[0].size() != x[0].size() ) )
    {
      cout<<"ERROR: LUdcmp::solve bad sizes"<<endl;
    }
  vector<double> xx(n);
  for (j=0; j<m; j++)
    {
      for (i=0; i<n; i++)
	{
	  xx[i] = b[i][j];
	}
      solve(xx,xx);
      for (i=0; i<n; i++)
	{
	  x[i][j] = xx[i];
	}
    }

}//end of the method


// The matrix inverse calculation method
//void LUdcmp::inverse(vector<vector<double> > &ainv)
vector<vector<double> > LUdcmp::inverse()
{
  int i, j;
  //  ainv.resize(n,n); //resize doesn't work on 2D vectors.
  vector<vector<double> > ainv(n,n);
 
  for (i=0; i<n; i++)
    {
      for (j=0; j<n; j++)
	{
	  ainv[i][j]=0;
	}
      ainv[i][i] = 1.0;
    }
  
  solve(ainv,ainv); //not sure if these arguements are in the correct order.

  return ainv;
}//end of the method



// The matrix determinant calculation method
double LUdcmp::det()
{
  double dd = d;
  for (int i=0; i<n; i++)
    {
      dd *= lu[i][i];
    }
  return dd;

}//end of the method

#endif
